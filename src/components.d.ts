/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface CalcBody {
    }
    interface CalcButton {
        "data": string;
        "equal"?: boolean;
        "erase"?: boolean;
    }
    interface CalcContainer {
    }
    interface CalcLog {
        "history": string[];
    }
    interface CalculadoraJulio {
    }
}
export interface CalcBodyCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalcBodyElement;
}
declare global {
    interface HTMLCalcBodyElementEventMap {
        "historyChanged": string[];
    }
    interface HTMLCalcBodyElement extends Components.CalcBody, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalcBodyElementEventMap>(type: K, listener: (this: HTMLCalcBodyElement, ev: CalcBodyCustomEvent<HTMLCalcBodyElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalcBodyElementEventMap>(type: K, listener: (this: HTMLCalcBodyElement, ev: CalcBodyCustomEvent<HTMLCalcBodyElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalcBodyElement: {
        prototype: HTMLCalcBodyElement;
        new (): HTMLCalcBodyElement;
    };
    interface HTMLCalcButtonElement extends Components.CalcButton, HTMLStencilElement {
    }
    var HTMLCalcButtonElement: {
        prototype: HTMLCalcButtonElement;
        new (): HTMLCalcButtonElement;
    };
    interface HTMLCalcContainerElement extends Components.CalcContainer, HTMLStencilElement {
    }
    var HTMLCalcContainerElement: {
        prototype: HTMLCalcContainerElement;
        new (): HTMLCalcContainerElement;
    };
    interface HTMLCalcLogElement extends Components.CalcLog, HTMLStencilElement {
    }
    var HTMLCalcLogElement: {
        prototype: HTMLCalcLogElement;
        new (): HTMLCalcLogElement;
    };
    interface HTMLCalculadoraJulioElement extends Components.CalculadoraJulio, HTMLStencilElement {
    }
    var HTMLCalculadoraJulioElement: {
        prototype: HTMLCalculadoraJulioElement;
        new (): HTMLCalculadoraJulioElement;
    };
    interface HTMLElementTagNameMap {
        "calc-body": HTMLCalcBodyElement;
        "calc-button": HTMLCalcButtonElement;
        "calc-container": HTMLCalcContainerElement;
        "calc-log": HTMLCalcLogElement;
        "calculadora-julio": HTMLCalculadoraJulioElement;
    }
}
declare namespace LocalJSX {
    interface CalcBody {
        "onHistoryChanged"?: (event: CalcBodyCustomEvent<string[]>) => void;
    }
    interface CalcButton {
        "data"?: string;
        "equal"?: boolean;
        "erase"?: boolean;
    }
    interface CalcContainer {
    }
    interface CalcLog {
        "history"?: string[];
    }
    interface CalculadoraJulio {
    }
    interface IntrinsicElements {
        "calc-body": CalcBody;
        "calc-button": CalcButton;
        "calc-container": CalcContainer;
        "calc-log": CalcLog;
        "calculadora-julio": CalculadoraJulio;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "calc-body": LocalJSX.CalcBody & JSXBase.HTMLAttributes<HTMLCalcBodyElement>;
            "calc-button": LocalJSX.CalcButton & JSXBase.HTMLAttributes<HTMLCalcButtonElement>;
            "calc-container": LocalJSX.CalcContainer & JSXBase.HTMLAttributes<HTMLCalcContainerElement>;
            "calc-log": LocalJSX.CalcLog & JSXBase.HTMLAttributes<HTMLCalcLogElement>;
            "calculadora-julio": LocalJSX.CalculadoraJulio & JSXBase.HTMLAttributes<HTMLCalculadoraJulioElement>;
        }
    }
}
